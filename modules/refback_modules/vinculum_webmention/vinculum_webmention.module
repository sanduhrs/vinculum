<?php
/**
 * @file
 * Provide the Webmention protocol to the Vinculum module.
 *
 * @see http://webmention.org/
 */

/**
 * Implements hook_vinculum_handler().
 */
function vinculum_webmention_vinculum_handler() {
  return array(
    'protocol' => t('Webmention'),
  );
}

/**
 * Implements hook_vinculum_send().
 */
function vinculum_webmention_vinculum_send($target, $source, $node) {
  return VinculumWebmentionHandler::send($source, $target);
}

/**
 * Implements hook_menu().
 */
function vinculum_webmention_menu() {
  // Endpoint for webmention registration for nodes. Not for humans!
  $items['node/%node/webmention'] = array(
    'title' => 'Webmentions',
    'page callback' => 'vinculum_webmention_receive',
    'page arguments' => array(1),

    // This URL is accessible according to the node's visibility to ANONYMOUS
    // users and whether 'Receive vinculums' is allowed on the node.
    'access callback' => 'vinculum_node_allows_vinculum',
    'access arguments' => array(1, 'receive'),

    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_node_view().
 *
 * Adds a HTTP header and a <link> tag which give the webmention server endpoint
 * URL.
 */
function vinculum_webmention_node_view($node, $view_mode, $langcode) {
  // @TODO: configurable view-modes?
  if ($view_mode == 'full' && vinculum_node_allows_vinculum($node, 'receive')) {
    $webmention_endpoint = url('node/' . $node->nid . '/webmention', array('absolute' => TRUE));

    // Add both a HTTP header and a <link> tag.
    drupal_add_http_header('Link', '<' . $webmention_endpoint . '>; rel="webmention"');
    drupal_add_html_head_link(array('rel' => 'webmention', 'href' => $webmention_endpoint));
  }
}

/**
 * Webmention endpoint; Menu callback.
 */
function vinculum_webmention_receive() {
  $success = TRUE;

  //Will check later #TODO will fight DDOS better https://github.com/converspace/webmention/blob/master/README.md#sender-notifies-receiver
  if (variable_get('vinculum_webmention_receive_async', FALSE)) {
    drupal_add_http_header('Status', '202 Accepted');
    echo check_plain($_POST['target']) . '/webmention_in_queue';
    // Perform end-of-request tasks.
    drupal_page_footer();
    return;
  }
  
  // Verify Webmention
  $source = check_plain($_POST['source']);
  $target = check_plain($_POST['target']);

  // 1. The receiver SHOULD check that target is a valid resource belonging to
  // it and that it accepts webmentions.
  $nid = vinculum_webmention_validate_resource_exists($target);
  $node = node_load($nid);
  if (!$node->nid) {
    $success = FALSE;
    drupal_add_http_header('Status', '400 Bad Request');
    echo t('No valid resource.');
  }

  if (!vinculum_webmention_validate_resource_accepts_webmentions($node)) {
    $success = FALSE;
    drupal_add_http_header('Status', '400 Bad Request');
    echo t('Resource does not accept Webmentions.');
  }

  // 2. The receiver SHOULD perform a HTTP GET request on source to confirm that
  // it actually links to target (note that the receiver will need to check the
  // Content-Type of the entity returned by source to make sure it is a textual
  // response).
  if (!vinculum_webmention_validate_source_exists($source)) {
    $success = FALSE;
    drupal_add_http_header('Status', '400 Bad Request');
    echo t('Source does not exist or is not accessible.');
  }

  if (!vinculum_webmention_validate_source_contains_target($source, $target)) {
    $success = FALSE;
    drupal_add_http_header('Status', '400 Bad Request');
    echo t('Source does not contain target.');
  }

  //@TODO Add / update / delete Webmention
  // Attempt to create a Vinculum entity.
  $vinculum = new VinculumReceived(array(
        'handler'  => 'vinculum_webmention',
        'localUrl' => $target,
        'url'      => $source,
        'nid'      => $node->nid,
  ));
  if ($result = $vinculum->save()) {
    // Successful: provide a meaningful response.
    if ($result == SAVED_NEW) {
      $message = t('WebMention from @source to @target registered.', array('@source' => $source, '@target' => $target));
    }
    elseif ($result == SAVED_UPDATED) {
      $message = t('WebMention from @source to @target updated.', array('@source' => $source, '@target' => $target));
    }
    return $message;
  }
  else {
    $success = FALSE;

    // Something went wrong.
    drupal_add_http_header('Status', '500 Internal Server Error');
    print 'Something went wrong. Really!';
  }

  // Everything went fine.
  if ($success) {
    drupal_add_http_header('Status', '200 OK');
    print 'OK';
  }
  vinculum_dbg($success, TRUE, 'webmentionthread');

  // Perform end-of-request tasks.
  drupal_page_footer();
}

/**
 * Validate if a local resource exists.
 *
 * @param string $target
 *   The local target URL
 *
 * @return int|bool
 *   Return a node id or FALSE
 */
function vinculum_webmention_validate_resource_exists($target) {
  return vinculum_lookup_nid($target);
  $parts = parse_url($target);

  // Non clean URL.
  if (isset($parts['path']) && $parts['path'] === '/index.php' &&
      isset($parts['query'])) {

    $query = substr($parts['query'], 2);
    $args = explode('/', $query);
    if (isset($args[0]) && $args[0] === 'node' &&
      is_numeric($args[1]) && !isset($args[2])) {

        $nid = (int) $args[1];
        $node = node_load($nid);
        return $node->nid;
    }
  }
  // Clean URL.
  elseif (isset($parts['path']) && substr($parts['path'], 0, 5) === '/node') {
    $query = substr($parts['path'], 1);
    $args = explode('/', $query);
    if (isset($args[0]) && $args[0] === 'node' &&
      is_numeric($args[1]) && !isset($args[2])) {

      $nid = (int) $args[1];
      $node = node_load($nid);
      return $node->nid;
    }
  }
  // Path alias.
  elseif (isset($parts['path'])) {
    $alias = $parts['path'];
    if ($query = drupal_lookup_path('source', $alias)) {
      $args = explode('/', $query);
      if (isset($args[0]) && $args[0] === 'node' &&
        is_numeric($args[1]) && !isset($args[2])) {

        $nid = (int) $args[1];
        $node = node_load($nid);
        return $node->nid;
      }
    }
  }
  // No idea.
  return FALSE;
}

/**
 * Validate if a resource accepts Webmentions.
 *
 * @param $target
 *
 * @return bool
 */
function vinculum_webmention_validate_resource_accepts_webmentions($node) {
  return (bool) $node->vinculum_send;
}

/**
 * Validate if a source exists.
 *
 * @param $source
 *
 * @return bool
 */
function vinculum_webmention_validate_source_exists($source) {
  return VinculumWebmentionHandler::validateSourceExists($source);
}

/**
 * Validate if a source contains the target URL.
 *
 * @param $source
 *
 * @return bool
 */
function vinculum_webmention_validate_source_contains_target($source, $target) {
  return VinculumWebmentionHandler::validateSourceContainsTarget($source, $target);
}
