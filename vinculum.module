<?php
/**
 * @file
 * Provide an API for vinculum-handlers to support vinculum-registration on
 * nodes.  At least one vinculum-handler (such as Pingback or Trackback) should
 * be enabled.
 *
 * Architecture overview:
 * - SENDING refbacks
 *   When nodes are added or updated, hook_node_presave creates a list of URLs
 *   which are references by the node.
 *   In hook_insert or hook_update, vinculum_send_refbacks() is invoked to
 *   attempt to send refbacks using the enabled handlers.
 *
 * - RECEIVING refbacks:
 *   Each handler implements its own way of detecting incoming refbacks (for
 *   example, the pingback module provides an XML-RPC service). All incoming
 *   data is parsed and presented to vinculum_receive().
 *
 * Data objects:
 * - SENT pingbacks are stored in the {node_vinculum_sent} table.
 * - RECEIVED pingbacks are stored in the {node_vinculum_received} table, and
 *   are exposed as entities.
 *
 * Meta-data about received ref-backs:
 * - GENERAL FOR ALL REF-BACKS:
 *   - Node NID
 *   - URL of the article which linked to us
 *   - Title   (extracted from the <title> tag)
 *   - Excerpt (extracted from the body content)
 *   - IP address
 *   - Timestamp
 *
 * - PINGBACKS:
 *   - as GENERAL
 *
 * - TRACKBACKS:
 *   - as GENERAL
 *   - Title     (provided in the trackback request)
 *   - Excerpt   (provided in the trackback request)
 *   - Blog name (provided in the trackback request)
 */

// User-agent used when extracting titles and excerpts.
define('VINCULUM_UA', 'Drupal Refback (+http://drupal.org/project/vinculum)');

// The local node could not be found.
define('VINCULUM_ERROR_LOCAL_NODE_NOT_FOUND', 1);

// The local node could not be used as a ref-back resource (e.g., ref-backs are
// disabled on the node).
define('VINCULUM_ERROR_LOCAL_NODE_REFBACK_NOT_ALLOWED', 2);

// The ref-back has previously been registered.
define('VINCULUM_ERROR_REFBACK_ALREADY_REGISTERED', 3);

// The ref-back source does not contain the link to target
define('VINCULUM_ERROR_REMOTE_URL_MISSING_LINK', 4);
/**
 * Implements hook_views_api().
 */
function vinculum_views_api() {
  return array(
    'api' => '3.0-alpha1',
    'path' => drupal_get_path('module', 'vinculum') . '/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function vinculum_entity_info() {
  $return = array(
    'vinculum_received' => array(
      'label' => t('Ref-back'),
      'plural label' => t('Ref-backs'),
      'description' => t('Pingbacks, trackbacks, and other referral types.'),
      'entity class' => 'VinculumReceived',
      'controller class' => 'EntityAPIController',
      'base table' => 'node_vinculum_received',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
      ),
      'bundles' => array(),
      'uri callback' => 'entity_class_uri',
      'module' => 'vinculum',
    ),
  );

  return $return;
}

/**
 * Implements hook_node_load().
 *
 * When a node is loaded, add the 'send' and 'receive' values (whether
 * ref-backs should be sent or received when the node is saved) to the node
 * object.
 */
function vinculum_node_load($nodes, $types) {
  $nids = array_keys($nodes);

  // Load the vinculum settings for these nodes.
  $vinculum_node_settings = _vinculum_node_get_settings($nids);

  foreach ($nids as $nid) {
    // If this node has already been configured, use the node's settings.
    if (array_key_exists($nid, $vinculum_node_settings)) {
      $nodes[$nid]->vinculum_send    = $vinculum_node_settings[$nid]->send;
      $nodes[$nid]->vinculum_receive = $vinculum_node_settings[$nid]->receive;
    }
    // Fallback to defaults.
    else {
      $node_type = $nodes[$nid]->type;
      $nodes[$nid]->vinculum_send    = variable_get("vinculum_send_{$node_type}", TRUE);
      $nodes[$nid]->vinculum_receive = variable_get("vinculum_receive_{$node_type}", TRUE);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function vinculum_node_presave($node) {
  // Only send ref-backs if the node is published, and has 'Send ref-backs'
  // checked.
  if ($node->status == NODE_PUBLISHED && !empty($node->vinculum_send)) {
    // Check the node content for links; compare the links with the ref-backs
    // previously sent.  If there are new links which have not already been
    // sent, attach these to the node at $node->vinculum_new_refbacks.
    $all_links = vinculum_get_external_links($node);

    // @TODO: compare the ref-backs in this list with ref-backs already sent.
    $new_links = $all_links;

    $node->vinculum_new_refbacks = $new_links;
  }
}

/**
 * Implements hook_node_insert().
 */
function vinculum_node_insert($node) {
  // Save the configuration.
  _vinculum_node_save_settings($node);
  // Send ref-backs if required.
  if (!empty($node->vinculum_new_refbacks)) {
    drupal_register_shutdown_function('vinculum_send_refbacks', $node->vinculum_new_refbacks, $node);// instead of vinculum_send_refbacks($node->vinculum_new_refbacks, $node); To ensure that node is saved

  }
}

/**
 * Implements hook_node_update().
 */
function vinculum_node_update($node) {
  // Save the configuration.
  _vinculum_node_save_settings($node);

// Send ref-backs if required.
  if (!empty($node->vinculum_new_refbacks)) {
    drupal_register_shutdown_function('vinculum_send_refbacks', $node->vinculum_new_refbacks, $node);
    //vinculum_send_refbacks($node->vinculum_new_refbacks, $node); //Ensure node is saved...
  }
}

/**
 * Implements hook_vinculum_get_external_links().
 *
 * Gets all the URLs found in the body field of a node.
 */
function vinculum_vinculum_get_external_links($node) {
  $text = _vinculum_extract_text($node);
  return _vinculum_extract_urls($text);
}

/**
 * Implements hook_vinculum_link_send_alter().
 *
 * Hook function provided on behalf of core's path functionality to support
 * URL aliases for nodes.
 */
function vinculum_vinculum_link_send_alter(&$links, $node) {
  foreach ($links as $key => $record) {
    $language = (isset($node->language)) ? $node->language : LANGUAGE_NONE;
    if ($url = drupal_lookup_path('alias', $record->source, $language)) {
      $links[$key]->source = $url;
    }
  }
}

/**
 * Implements hook_vinculum_received_validate().
 */
function vinculum_vinculum_received_validate(VinculumReceived $vinculum) {
  // Validate the node exists, is published, and permits ref-backs.
  $node = node_load($vinculum->nid);
  if (empty($node)) {
    return array(VINCULUM_ERROR_LOCAL_NODE_NOT_FOUND, 'Target for ref-back not found.');
  }
  elseif (!vinculum_node_allows_vinculum($node, 'receive')) {
    return array(VINCULUM_ERROR_LOCAL_NODE_REFBACK_NOT_ALLOWED, 'The target does not permit ref-backs.');
  }
  elseif (vinculum_is_received($vinculum->nid, $vinculum->url)) {
    return array(VINCULUM_ERROR_REFBACK_ALREADY_REGISTERED, 'The ref-back has already been registered.');
  }
  // Optional validation:
  // Validate that the remote URL is reachable and links to the referenced
  // node.
  if (variable_get('vinculum_validate_remote_pages', FALSE)) {
    // Validate that the remote node is reachable.
    $headers=array();//$headers=array( "headers" => array("X-Forwarded-For"=> origin_ip ) ); #TODO: add X-Forwarded-For to fight against DDOS as says https://indiewebcamp.com/Webmention#using_x-forwarded-for_to_mitigate_DDoS_abuse . Needs to set origin_ip in vnculum object.
    $result = drupal_http_request($vinculum->url, array( "headers" => $headers ));

    // Treat all HTTP errors (inc Forbidden) as remote URL not found.
    if (isset($result->error)) {
      return array(VINCULUM_ERROR_REMOTE_URL_NOT_FOUND, 'The ref-back source is not found.');
    }

    // Check the content for a link to the local node.
    $content = $result->data;
    // Extract all the URLs from the page content.
    $urls = _vinculum_extract_urls($content);
    $matched = FALSE;
    if (in_array($vinculum->localUrl, $urls)) {
      //Fast check if absolute url found
      $matched=TRUE;
    }
    else{
      //else look for relatives urls
      foreach ($urls as $url) {
        if ($vinculum->nid == vinculum_lookup_nid($url)) {
          $matched = TRUE;
          break;
        }
      }
    }
    if (!$matched) {
      return array(VINCULUM_ERROR_REMOTE_URL_MISSING_LINK, "The target url is not found in source code.");
    }
  }


}

/**
 * Implements hook_vinculum_received_presave().
 */
function vinculum_vinculum_received_presave(VinculumReceived $vinculum) {
/*  if (empty($vinculum->title) || empty($vinculum->excerpt)) {
    // Populate title and excerpt if possible.
    if (   $data =_vinculum_get_excerpt(  $vinculum->url, url( "node/{$vinculum->nid}", array('absolute' =>      TRUE) )  )   ){
      list ($title, $excerpt) = $data;
      $vinculum->title   = $vinculum->title ?: $title;
      $vinculum->excerpt = $vinculum->excerpt ?: $excerpt;
    }
    else {
      // If the title couldn't be extracted programmatically, set the title to
      // match the URL.
      $vinculum->title = $vinculum->url;
    }
  }
  */
}

/**
 * Implements hook_vinculum_received_insert().
 */
function vinculum_vinculum_received_insert(VinculumReceived $vinculum) {
  // Fire hook_vinculum_received_action().
  // Actions are implemented through:
  // - vinculum_rules - integrates with the rules module.
  module_invoke_all('vinculum_received_action', $vinculum);
}


/**
 * Public API functions.
 */

/**
 * Check if a node allows vinculum operations.
 *
 * @param Object $node
 *   The node to check.
 * @param string $op
 *   One of 'send' or 'receive'
 *
 * @return bool
 *   Returns a boolena TRUE or FALSE
 */
function vinculum_node_allows_vinculum($node, $op) {
  // Both send and receive ops depend on the node allowing anonymous access.
  if (!node_access('view', $node, drupal_anonymous_user())) {
    return FALSE;
  }

  switch ($op) {
    case 'send':
      return isset($node->vinculum_send) ? $node->vinculum_send : variable_get("vinculum_send_{$node->type}", TRUE);

    case 'receive':
      return isset($node->vinculum_receive) ? $node->vinculum_receive : variable_get("vinculum_receive_{$node->type}", TRUE);
  }
}

/**
 * Get a list of external links from a node.
 *
 * This invokes hook_vinculum_get_external_links.
 * By default, the vinculum module checks only the BODY field.  Create an
 * implementation of hook_vinculum_get_external_links() to check other fields.
 *
 * @param Object $node
 *   The node to check.
 *
 * @return array
 *   An array of external link URLs.
 */
function vinculum_get_external_links($node) {
  $links = module_invoke_all('vinculum_get_external_links', $node);

  // Remove duplicate links.
  $links = array_unique($links);

  return $links;
}

/**
 * Invoke vinculum handlers on each external link to record a vinculum.
 *
 * @param array $links
 *   An array of external URLs.
 */
function vinculum_send_refbacks($links, $node) {

  // The initial source URL is defined as node/xxx.
  // Other modules can alter this through hook_vinculum_link_send_alter if
  // necessary (for example, to assign a canonical or alternative URL).
  $source = "node/{$node->nid}";

  // Build up a list of vinculum records for altering.
  $records = array();
  foreach ($links as $link) {
    $records[$link] = (object) array(
      'source' => $source,
      'target' => $link,
    );
  }

  // Invoke hook_vinculum_link_send_alter().
  // Allow other modules to change the source/target URLs before sending
  // vinculums (the node property is unalterable here).
  drupal_alter('vinculum_link_send', $records, $node);

  foreach ($records as $record) {
    $source = url($record->source, array('absolute' => TRUE));
    vinculum_send_single_vinculum($source, $record->target, $node);
  }
}

/**
 * Invoke vinculum handlers to send a vinculum.
 *
 * @param string $source
 *   The canonical URL of the local node.
 * @param string $target
 *   The URL of the remote page.
 * @param object $node
 *   The local node object.
 *
 * @return bool
 *   TRUE if the remote server accepts the vinculum request.
 */
function vinculum_send_single_vinculum($source, $target, $node) {
  // Record the timestamp of this attempt in the {node_vinculum_sent} table.
  // This allows vinculums which have not been successful to be re-attempted
  // periodically.
  $send_time = time();
  db_merge('node_vinculum_sent')
    ->key(array(
      'nid' => $node->nid,
      'url' => $target,
      ))
    ->fields(array(
      'created' => $send_time,
    ))
    ->execute();

  $handlers = vinculum_get_handler();
  foreach ($handlers as $handler) {
    // Invoke hook_vinculum_send().
    $callback = $handler->module . '_vinculum_send';

    // Ensure the function exists before attempting to call it.
    if (!function_exists($callback)) {
      continue;
    }
    $success = $callback($target, $source, $node);

    // If the handler reports success, log this as a successful request.
    if ($success) {
      $params = array(
        '%target'     => $target,
        '@node_url'   => url("node/{$node->nid}"),
        '%node_title' => $node->title,
        '%handler'    => $handler->module,
      );
      watchdog('Vinculum', 'Vinculum sent to %target for node <a href="@node_url">%node_title</a> using %handler.', $params, WATCHDOG_DEBUG);

      db_merge('node_vinculum_sent')
        ->key(array(
          'nid' => $node->nid,
          'url' => $target,
          ))
        ->fields(array(
          'handler' => $handler->module,
        ))
        ->execute();
      // Stop at the first successful handler.
      // Fire hook_vinculum_sent_action().
      // Actions are implemented through:
      // - vinculum_rules - integrates with the rules module.
      // Treat vinculum as vinculum object.
      //$vinculum=new vinculum((int)$node->nid, $target, $handler->module);OLD! TODO REMOVE
      // Attempt to create a sent object with basic info
      $vinculum_sent = new stdClass;
      $vinculum_sent->handler= $handler->module;
      $vinculum_sent->url= $target;
      $vinculum_sent->nid= $node->nid;
      $vinculum_sent->created= $send_time;
      $vinculum_sent->title= $node->title;

      module_invoke_all('vinculum_sent_action', $vinculum_sent);
      return TRUE;
    }
  }

  $params = array(
    '%target'     => $target,
    '@node_url'   => url("node/{$node->nid}"),
    '%node_title' => $node->title,
  );
  watchdog('Vinculum', 'Ref-backs could not be sent to %target for node <a href="@node_url">%node_title</a> - no ref-back handler was found.', $params, WATCHDOG_DEBUG);
  return FALSE;
}

/**
 * Given a local URL, attempt to lookup its NID.
 *
 * @param String $url
 * The URL to a local page.
 *
 * @return Int|FALSE
 * The node NID, or FALSE if a corresponding node cannot be found.
 */
function vinculum_lookup_nid($url) {
  $path = str_replace($GLOBALS['base_url'] . "/" , "", $url);
  if ($path != $url) {
    $node_path = explode('/', drupal_get_normal_path($path));
    if ($node_path[0] == 'node' && is_numeric($node_path[1]) && !isset($node_path[2]) ) {
      return (int)$node_path[1];
    }
  }
  return FALSE;
}

/**
 * Check if a vinculum has already been received for a particular node/URL.
 *
 * @param int $nid
 *   The node nid.
 * @param string $url
 *   The URL of the external site.
 *
 * @return bool
 *   TRUE if the vinculum has already been registered.
 */
function vinculum_is_received($nid, $url) {
  $result = db_select('node_vinculum_received', 'nlr', array('target' => 'slave'))
    ->fields('nlr', array('nid'))
    ->condition("nlr.nid", $nid)
    ->condition("nlr.url", $url)
    ->execute()
    ->fetchField();
  return (bool) $result;
}

/**
 * Check if a vinculum has already been sent for a particular node/URL.
 *
 * @param int $nid
 *   The node nid.
 * @param string $url
 *   The URL of the external site.
 *
 * @return bool
 *   TRUE if the vinculum has already been sent.
 */
function vinculum_is_sent($nid, $url) {
  $result = db_select('node_vinculum_sent', 'nls', array('target' => 'slave'))
    ->fields('nls', array('nid'))
    ->condition("nls.nid", $nid)
    ->condition("nls.url", $url)
    ->isNotNull('nls.handler')
    ->execute()
    ->fetchField();
  return (bool) $result;
}

/**
 * Get a list of vinculum-handlers and their attributes.
 *
 * @return array
 *   An array of vinculum handler objects. Each handler has the properties:
 *     - module
 *       The system-name of the module.
 *     - protocol
 *       The human-readable name of the vinculum protocol provided.
 *     - weight
 *       The weight of the module.
 */
function vinculum_get_handler($handler = NULL) {
  $handlers = vinculum_load_all_handlers();
  if (is_null($handler)) {
    return $handlers;
  }
  elseif (isset($handlers[$handler])) {
    return $handlers[$handler];
  }
  else {
    return NULL;
  }
}

/**
 * Fetch a list of all the vinculum handlers.
 *
 * @param bool $reset_cache
 *   Set to TRUE to force a relooad of the handlers from their hooks.
 *
 * @return array
 *   A list of vinculum handlers, ordered according to the priority from most
 *   important to least. Each handler has the properties:
 *     - module
 *       The system-name of the module.
 *     - protocol
 *       The human-readable name of the vinculum protocol provided.
 *     - weight
 *       The weight of the module.
 */
function vinculum_load_all_handlers($reset_cache = FALSE) {
  if (!($reset_cache) && $cache = cache_get('vinculum_handlers')) {
    $handlers = $cache->data;
  }
  else {
    // Invoke hook_vinculum_handler().
    // module_invoke_all() will order the results by module-weight: no further
    // sorting required.
    $vinculum_handler_modules = module_implements('vinculum_handler');

    $weights = _vinculum_get_module_weights($vinculum_handler_modules);
    $handlers = array();
    foreach ($vinculum_handler_modules as $module) {
      $callback = "{$module}_vinculum_handler";

      $handlers[$module] = (object) $callback();
      $handlers[$module]->module = $module;
      $handlers[$module]->weight = $weights[$module];
    }
    cache_set('vinculum_handlers', $handlers);
  }

  return $handlers;
}

/**
 * Set the weights of modules.
 *
 * @param array $weights
 *   Array of module weights, keyed by the system-name of the module.
 */
function vinculum_set_weights($weights) {
  foreach ($weights as $module => $weight) {
    _vinculum_set_weight($module, $weight);
  }

  // We need to rebuild the module-weight cache when this is called.
  cache_clear_all('hook_info', 'cache_bootstrap');
  cache_clear_all('module_implements', 'cache_bootstrap');
  cache_clear_all('system_list', 'cache_bootstrap');
  cache_clear_all('vinculum_handlers', 'cache');
}

/**
 * Private API handlers.
 */

/**
 * Fetch the node-settings (whether send/receive is on) for one or more nodes.
 *
 * @param int|array $nids
 *   Either a single node nid, or an array of node nids.
 *
 * @return array
 *   An array of settings objects (each with the properties 'nid', 'send' and
 *   'receive'), indexed by node nid.
 */
function _vinculum_node_get_settings($nids) {
  if (is_numeric($nids)) {
    $nids = array($nids);
  }

  $result = db_select('node_vinculum_settings', 'nls', array('target' => 'slave'))
    ->fields('nls', array('nid', 'send', 'receive'))
    ->condition("nls.nid", $nids, 'IN')
    ->execute()
    ->fetchAllAssoc('nid');

  return $result;
}

/**
 * Save settings for a node, scan the node for links, and fire-off as needed.
 */
function _vinculum_node_save_settings($node) {
  // If a custom send/receive setting has not been provided, use the default
  // setting for this node-type.
  $settings = array(
    'send' => isset($node->vinculum_send) ? (bool) $node->vinculum_send : variable_get("vinculum_send_{$node->type}", TRUE),
    'receive' => isset($node->vinculum_receive) ? (bool) $node->vinculum_receive : variable_get("vinculum_receive_{$node->type}", TRUE),
  );

  // Update the flags in {node_vinculum_settings}.
  db_merge('node_vinculum_settings')
    ->key(array(
      'nid' => $node->nid,
      ))
    ->fields(array(
      // Cast the booleans to an int, to match the db data-type.
      'send'    => (int) $settings['send'],
      'receive' => (int) $settings['receive'],
    ))
    ->execute();
}

/**
 * Get the module-weights for a set of modules.
 *
 * Used to fetch the weights of the vinculum-handler modules.
 *
 * @param array $modules
 *   An array of module names.
 *
 * @return array
 *   An array of module-weights, keyed by module name.
 */
function _vinculum_get_module_weights($modules) {
  if (!is_array($modules) || empty($modules)) {
    return array();
  }

  $result = db_select('system', 's', array('target' => 'slave'))
    ->fields('s', array('name', 'weight'))
    ->condition('s.type', 'module')
    ->condition("s.name", $modules, 'IN')
    ->orderBy('weight', 'ASC')
    ->orderBy('filename', 'ASC')
    ->execute()
    ->fetchAllAssoc('name');

  $weights = array();
  foreach ($result as $module => $row) {
    $weights[$module] = $row->weight;
  }
  return $weights;
}

/**
 * Set the weight of a module.
 *
 * @param string $module
 *   The system name of the module.
 * @param int $weight
 *   The new weight to set.
 */
function _vinculum_set_weight($module, $weight) {
  db_merge('system')
    ->key(array(
      'type' => 'module',
      'name' => $module,
      ))
    ->fields(array(
      'weight' => $weight,
    ))
    ->execute();
}

/**
 * Extract text from a single field-API field.
 *
 * @param object $node
 *   A drupal node.
 *
 * @return string
 *   The text found in the node's body field.
 */
function _vinculum_extract_text($node) {
  $langcode = field_language('node', $node, 'body');

  // If body is empty, abort early.
  if (!isset($node->body[$langcode][0])) {
    return '';
  }

  $item = $node->body[$langcode][0];

  // Use the API to generate a renderable array.  This allows all the regular
  // field-alter hooks to fire, so we get the same text as it would be rendered
  // on the page.
  $field = field_view_value('node', $node, 'body', $item);
  $text = drupal_render($field);

  return $text;
}

/**
 * Extract all the external URLs from a single string.
 */
function _vinculum_extract_urls($text) {
  // Check for the href value of explicit <a> tags, and remove the text found
  // within the <a> tags (because the "Convert URLs into links" filter may
  // shorten <a> text, making uniqueness difficult).
  $pattern = "#<a [^>]*?href=([\"'])([^\\1]+?)\\1[^>]*?>.*?</a>#ms";
  preg_match_all($pattern, $text, $matches);

  // Matches:
  // 0 = The full <a>...</a> tag.
  // 1 = The initial quote mark (used purely for back-referencing)
  // 2 = The value of the href attribute.
  $links = $matches[2];

  // Remove the <a>...</a> tags which have just been captured.
  $text = preg_replace($pattern, '', $text);

  // Regexp is stolen from trackback.module ;)
  preg_match_all("/(http|https):\/\/[a-zA-Z0-9@:%_~#?&=.,\/;-]*[a-zA-Z0-9@:%_~#&=\/;-]/", $text, $matches);

  // TODO: check that the URLs are external, and not local FQDN?

  $links = array_merge($links, $matches[0]);
  return array_unique($links);
}

/**
 * Performs an HTTP request.
 *
 * This is a straight copy of Drupal Core drupal_http_request() function with
 * support for multi value link headers.
 *
 * This is a flexible and powerful HTTP client implementation. Correctly
 * handles GET, POST, PUT or any other HTTP requests. Handles redirects.
 *
 * @param $url
 *   A string containing a fully qualified URI.
 * @param array $options
 *   (optional) An array that can have one or more of the following elements:
 *   - headers: An array containing request headers to send as name/value pairs.
 *   - method: A string containing the request method. Defaults to 'GET'.
 *   - data: A string containing the request body, formatted as
 *     'param=value&param=value&...'. Defaults to NULL.
 *   - max_redirects: An integer representing how many times a redirect
 *     may be followed. Defaults to 3.
 *   - timeout: A float representing the maximum number of seconds the function
 *     call may take. The default is 30 seconds. If a timeout occurs, the error
 *     code is set to the HTTP_REQUEST_TIMEOUT constant.
 *   - context: A context resource created with stream_context_create().
 *
 * @return object
 *   An object that can have one or more of the following components:
 *   - request: A string containing the request body that was sent.
 *   - code: An integer containing the response status code, or the error code
 *     if an error occurred.
 *   - protocol: The response protocol (e.g., HTTP/1.1 or HTTP/1.0).
 *   - status_message: The status message from the response, if a response was
 *     received.
 *   - redirect_code: If redirected, an integer containing the initial response
 *     status code.
 *   - redirect_url: If redirected, a string containing the URL of the redirect
 *     target.
 *   - error: If an error occurred, the error message. Otherwise not set.
 *   - headers: An array containing the response headers as name/value pairs.
 *     HTTP header names are case-insensitive (RFC 2616, section 4.2), so for
 *     easy access the array keys are returned in lower case.
 *   - data: A string containing the response body that was received.
 */
function vinculum_drupal_http_request($url, array $options = array()) {
  $result = new stdClass();

  // Parse the URL and make sure we can handle the schema.
  $uri = @parse_url($url);

  if ($uri == FALSE) {
    $result->error = 'unable to parse URL';
    $result->code = -1001;
    return $result;
  }

  if (!isset($uri['scheme'])) {
    $result->error = 'missing schema';
    $result->code = -1002;
    return $result;
  }

  timer_start(__FUNCTION__);

  // Merge the default options.
  $options += array(
    'headers' => array(),
    'method' => 'GET',
    'data' => NULL,
    'max_redirects' => 3,
    'timeout' => 30.0,
    'context' => NULL,
  );

  // Merge the default headers.
  $options['headers'] += array(
    'User-Agent' => 'Drupal (+http://drupal.org/)',
  );

  // stream_socket_client() requires timeout to be a float.
  $options['timeout'] = (float) $options['timeout'];

  // Use a proxy if one is defined and the host is not on the excluded list.
  $proxy_server = variable_get('proxy_server', '');
  if ($proxy_server && _drupal_http_use_proxy($uri['host'])) {
    // Set the scheme so we open a socket to the proxy server.
    $uri['scheme'] = 'proxy';
    // Set the path to be the full URL.
    $uri['path'] = $url;
    // Since the URL is passed as the path, we won't use the parsed query.
    unset($uri['query']);

    // Add in username and password to Proxy-Authorization header if needed.
    if ($proxy_username = variable_get('proxy_username', '')) {
      $proxy_password = variable_get('proxy_password', '');
      $options['headers']['Proxy-Authorization'] = 'Basic ' . base64_encode($proxy_username . (!empty($proxy_password) ? ":" . $proxy_password : ''));
    }
    // Some proxies reject requests with any User-Agent headers, while others
    // require a specific one.
    $proxy_user_agent = variable_get('proxy_user_agent', '');
    // The default value matches neither condition.
    if ($proxy_user_agent === NULL) {
      unset($options['headers']['User-Agent']);
    }
    elseif ($proxy_user_agent) {
      $options['headers']['User-Agent'] = $proxy_user_agent;
    }
  }

  switch ($uri['scheme']) {
    case 'proxy':
      // Make the socket connection to a proxy server.
      $socket = 'tcp://' . $proxy_server . ':' . variable_get('proxy_port', 8080);
      // The Host header still needs to match the real request.
      $options['headers']['Host'] = $uri['host'];
      $options['headers']['Host'] .= isset($uri['port']) && $uri['port'] != 80 ? ':' . $uri['port'] : '';
      break;

    case 'http':
    case 'feed':
      $port = isset($uri['port']) ? $uri['port'] : 80;
      $socket = 'tcp://' . $uri['host'] . ':' . $port;
      // RFC 2616: "non-standard ports MUST, default ports MAY be included".
      // We don't add the standard port to prevent from breaking rewrite rules
      // checking the host that do not take into account the port number.
      $options['headers']['Host'] = $uri['host'] . ($port != 80 ? ':' . $port : '');
      break;

    case 'https':
      // Note: Only works when PHP is compiled with OpenSSL support.
      $port = isset($uri['port']) ? $uri['port'] : 443;
      $socket = 'ssl://' . $uri['host'] . ':' . $port;
      $options['headers']['Host'] = $uri['host'] . ($port != 443 ? ':' . $port : '');
      break;

    default:
      $result->error = 'invalid schema ' . $uri['scheme'];
      $result->code = -1003;
      return $result;
  }

  if (empty($options['context'])) {
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout']);
  }
  else {
    // Create a stream with context. Allows verification of a SSL certificate.
    $fp = @stream_socket_client($socket, $errno, $errstr, $options['timeout'], STREAM_CLIENT_CONNECT, $options['context']);
  }

  // Make sure the socket opened properly.
  if (!$fp) {
    // When a network error occurs, we use a negative number so it does not
    // clash with the HTTP status codes.
    $result->code = -$errno;
    $result->error = trim($errstr) ? trim($errstr) : t('Error opening socket @socket', array('@socket' => $socket));

    // Mark that this request failed. This will trigger a check of the web
    // server's ability to make outgoing HTTP requests the next time that
    // requirements checking is performed.
    // See system_requirements().
    variable_set('drupal_http_request_fails', TRUE);

    return $result;
  }

  // Construct the path to act on.
  $path = isset($uri['path']) ? $uri['path'] : '/';
  if (isset($uri['query'])) {
    $path .= '?' . $uri['query'];
  }

  // Only add Content-Length if we actually have any content or if it is a POST
  // or PUT request. Some non-standard servers get confused by Content-Length in
  // at least HEAD/GET requests, and Squid always requires Content-Length in
  // POST/PUT requests.
  $content_length = strlen($options['data']);
  if ($content_length > 0 || $options['method'] == 'POST' || $options['method'] == 'PUT') {
    $options['headers']['Content-Length'] = $content_length;
  }

  // If the server URL has a user then attempt to use basic authentication.
  if (isset($uri['user'])) {
    $options['headers']['Authorization'] = 'Basic ' . base64_encode($uri['user'] . (isset($uri['pass']) ? ':' . $uri['pass'] : ':'));
  }

  // If the database prefix is being used by SimpleTest to run the tests in a copied
  // database then set the user-agent header to the database prefix so that any
  // calls to other Drupal pages will run the SimpleTest prefixed database. The
  // user-agent is used to ensure that multiple testing sessions running at the
  // same time won't interfere with each other as they would if the database
  // prefix were stored statically in a file or database variable.
  $test_info = &$GLOBALS['drupal_test_info'];
  if (!empty($test_info['test_run_id'])) {
    $options['headers']['User-Agent'] = drupal_generate_test_ua($test_info['test_run_id']);
  }

  $request = $options['method'] . ' ' . $path . " HTTP/1.0\r\n";
  foreach ($options['headers'] as $name => $value) {
    $request .= $name . ': ' . trim($value) . "\r\n";
  }
  $request .= "\r\n" . $options['data'];
  $result->request = $request;
  // Calculate how much time is left of the original timeout value.
  $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
  if ($timeout > 0) {
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    fwrite($fp, $request);
  }

  // Fetch response. Due to PHP bugs like http://bugs.php.net/bug.php?id=43782
  // and http://bugs.php.net/bug.php?id=46049 we can't rely on feof(), but
  // instead must invoke stream_get_meta_data() each iteration.
  $info = stream_get_meta_data($fp);
  $alive = !$info['eof'] && !$info['timed_out'];
  $response = '';

  while ($alive) {
    // Calculate how much time is left of the original timeout value.
    $timeout = $options['timeout'] - timer_read(__FUNCTION__) / 1000;
    if ($timeout <= 0) {
      $info['timed_out'] = TRUE;
      break;
    }
    stream_set_timeout($fp, floor($timeout), floor(1000000 * fmod($timeout, 1)));
    $chunk = fread($fp, 1024);
    $response .= $chunk;
    $info = stream_get_meta_data($fp);
    $alive = !$info['eof'] && !$info['timed_out'] && $chunk;
  }
  fclose($fp);

  if ($info['timed_out']) {
    $result->code = HTTP_REQUEST_TIMEOUT;
    $result->error = 'request timed out';
    return $result;
  }
  // Parse response headers from the response body.
  // Be tolerant of malformed HTTP responses that separate header and body with
  // \n\n or \r\r instead of \r\n\r\n.
  list($response, $result->data) = preg_split("/\r\n\r\n|\n\n|\r\r/", $response, 2);
  $response = preg_split("/\r\n|\n|\r/", $response);

  // Parse the response status line.
  $response_status_array = _drupal_parse_response_status(trim(array_shift($response)));
  $result->protocol = $response_status_array['http_version'];
  $result->status_message = $response_status_array['reason_phrase'];
  $code = $response_status_array['response_code'];

  $result->headers = array();

  // Parse the response headers.
  while ($line = trim(array_shift($response))) {
    list($name, $value) = explode(':', $line, 2);
    $name = strtolower($name);
    if (isset($result->headers[$name]) && $name == 'set-cookie') {
      // RFC 2109: the Set-Cookie response header comprises the token Set-
      // Cookie:, followed by a comma-separated list of one or more cookies.
      $result->headers[$name] .= ',' . trim($value);
    }
    elseif (isset($result->headers[$name]) && $name == 'link') {
      // RFC 5988: multiple links to and from a particular IRI.
      $result->headers[$name] .= ',' . trim($value);
    }
    else {
      $result->headers[$name] = trim($value);
    }
  }

  $responses = array(
    100 => 'Continue',
    101 => 'Switching Protocols',
    200 => 'OK',
    201 => 'Created',
    202 => 'Accepted',
    203 => 'Non-Authoritative Information',
    204 => 'No Content',
    205 => 'Reset Content',
    206 => 'Partial Content',
    300 => 'Multiple Choices',
    301 => 'Moved Permanently',
    302 => 'Found',
    303 => 'See Other',
    304 => 'Not Modified',
    305 => 'Use Proxy',
    307 => 'Temporary Redirect',
    400 => 'Bad Request',
    401 => 'Unauthorized',
    402 => 'Payment Required',
    403 => 'Forbidden',
    404 => 'Not Found',
    405 => 'Method Not Allowed',
    406 => 'Not Acceptable',
    407 => 'Proxy Authentication Required',
    408 => 'Request Time-out',
    409 => 'Conflict',
    410 => 'Gone',
    411 => 'Length Required',
    412 => 'Precondition Failed',
    413 => 'Request Entity Too Large',
    414 => 'Request-URI Too Large',
    415 => 'Unsupported Media Type',
    416 => 'Requested range not satisfiable',
    417 => 'Expectation Failed',
    500 => 'Internal Server Error',
    501 => 'Not Implemented',
    502 => 'Bad Gateway',
    503 => 'Service Unavailable',
    504 => 'Gateway Time-out',
    505 => 'HTTP Version not supported',
  );
  // RFC 2616 states that all unknown HTTP codes must be treated the same as the
  // base code in their class.
  if (!isset($responses[$code])) {
    $code = floor($code / 100) * 100;
  }
  $result->code = $code;

  switch ($code) {
    case 200: // OK
    case 304: // Not modified
      break;
    case 301: // Moved permanently
    case 302: // Moved temporarily
    case 307: // Moved temporarily
      $location = $result->headers['location'];
      $options['timeout'] -= timer_read(__FUNCTION__) / 1000;
      if ($options['timeout'] <= 0) {
        $result->code = HTTP_REQUEST_TIMEOUT;
        $result->error = 'request timed out';
      }
      elseif ($options['max_redirects']) {
        // Redirect to the new location.
        $options['max_redirects']--;
        $result = drupal_http_request($location, $options);
        $result->redirect_code = $code;
      }
      if (!isset($result->redirect_url)) {
        $result->redirect_url = $location;
      }
      break;
    default:
      $result->error = $result->status_message;
  }

  return $result;
}
